package com.mycompany.mathbot;

/**
 * –ê–≤—Ç–æ—Ä: Viktoriia Bohoslavska
 */

import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.TelegramBotsApi;
import org.telegram.telegrambots.meta.api.methods.send.*;
import org.telegram.telegrambots.meta.api.objects.*;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.updatesreceivers.DefaultBotSession;

import java.util.*;

public class MathBot extends TelegramLongPollingBot {

    private static final String BOT_USERNAME = "he1pMath_bot";
    private static final String BOT_TOKEN = "766";
    private static final long GROUP_CHAT_ID = L;

    private final Map<Long, PendingRequest> activeRequests = new HashMap<>();

    @Override
    public String getBotUsername() {
        return BOT_USERNAME;
    }

    @Override
    public String getBotToken() {
        return BOT_TOKEN;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (!update.hasMessage()) return;

        Message message = update.getMessage();
        Long chatId = message.getChatId();

        if (message.hasPhoto()) {
            List<PhotoSize> photos = message.getPhoto();
            String fileId = photos.get(photos.size() - 1).getFileId();
            activeRequests.put(chatId, new PendingRequest(chatId, fileId));
            sendText(chatId, "‚úÖ –§–æ—Ç–æ –æ—Ç—Ä–∏–º–∞–Ω–æ! –í–∫–∞–∂—ñ—Ç—å —Å—Ç—Ä–æ–∫ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è.");
        }
        else if (activeRequests.containsKey(chatId) && message.hasText()) {
            PendingRequest req = activeRequests.get(chatId);
            req.setDeadline(message.getText());
            sendToGroup(req);
            sendText(chatId, "–î—è–∫—É—î–º–æ! –ú–∏ —Å–∫–æ—Ä–æ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ ‚úÖ");
        }
        else if (message.hasText()) {
            String text = message.getText();

            if (text.startsWith("/—Å–ø–∏—Å–æ–∫")) {
                sendListToGroup();
            }
            else if (text.startsWith("/—Ü—ñ–Ω–∞")) {
                String[] parts = text.split(" ", 3);
                if (parts.length == 3) {
                    try {
                        Long targetId = Long.parseLong(parts[1]);
                        String price = parts[2];
                        sendText(targetId, "üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å –≤–∞—à–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è: " + price);
                        sendText(chatId, "‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–ª—ñ—î–Ω—Ç—É.");
                    } catch (Exception e) {
                        sendText(chatId, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π chatId.");
                    }
                } else {
                    sendText(chatId, "–§–æ—Ä–º–∞—Ç: /—Ü—ñ–Ω–∞ [chatId] [—Å—É–º–∞]");
                }
            }
            else if (text.startsWith("/—Ñ–∞–π–ª")) {
                String[] parts = text.split(" ");
                if (parts.length == 2 && message.hasDocument()) {
                    try {
                        Long targetId = Long.parseLong(parts[1]);
                        SendDocument doc = new SendDocument();
                        doc.setChatId(String.valueOf(targetId));
                        doc.setDocument(new InputFile(message.getDocument().getFileId()));
                        execute(doc);
                        sendText(chatId, "üì§ –§–∞–π–ª –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–ª—ñ—î–Ω—Ç—É.");
                    } catch (Exception e) {
                        sendText(chatId, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ.");
                    }
                } else {
                    sendText(chatId, "–§–æ—Ä–º–∞—Ç: /—Ñ–∞–π–ª [chatId] (–¥–æ–¥–∞–π —Ñ–∞–π–ª)");
                }
            }
        }
    }

    private void sendToGroup(PendingRequest req) {
        SendPhoto photo = new SendPhoto();
        photo.setChatId(String.valueOf(GROUP_CHAT_ID));
        photo.setPhoto(new InputFile(req.getFileId()));
        photo.setCaption("üì• –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞:\n" +
                         "üë§ chatId: `" + req.getUserId() + "`\n" +
                         "üïì –°—Ç—Ä–æ–∫: *" + req.getDeadline() + "*\n" +
                         "‚úâÔ∏è [–ü–µ—Ä–µ–π—Ç–∏ –¥–æ —á–∞—Ç—É](https://t.me/c/" + Math.abs(req.getUserId()) + ")");
        photo.setParseMode("Markdown");
        try {
            execute(photo);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void sendListToGroup() {
        StringBuilder sb = new StringBuilder("üìã –ê–∫—Ç–∏–≤–Ω—ñ –∑–∞—è–≤–∫–∏:\n");
        for (PendingRequest req : activeRequests.values()) {
            sb.append("üë§ chatId: ").append(req.getUserId())
              .append(" | –°—Ç—Ä–æ–∫: ").append(req.getDeadline() == null ? "–ù–µ –≤–∫–∞–∑–∞–Ω–æ" : req.getDeadline()).append("\n");
        }
        sendText(GROUP_CHAT_ID, sb.toString());
    }

    private void sendText(Long chatId, String text) {
        SendMessage msg = new SendMessage();
        msg.setChatId(chatId.toString());
        msg.setText(text);
        msg.setParseMode("Markdown");
        try {
            execute(msg);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        try {
            TelegramBotsApi api = new TelegramBotsApi(DefaultBotSession.class);
            api.registerBot(new MathBot());
            System.out.println("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –û—á—ñ–∫—É—é –Ω–∞ –∑–∞—è–≤–∫–∏...");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    static class PendingRequest {
        private final Long userId;
        private final String fileId;
        private String deadline;

        public PendingRequest(Long userId, String fileId) {
            this.userId = userId;
            this.fileId = fileId;
        }

        public Long getUserId() { return userId; }
        public String getFileId() { return fileId; }
        public String getDeadline() { return deadline; }
        public void setDeadline(String deadline) { this.deadline = deadline; }
    }
}



